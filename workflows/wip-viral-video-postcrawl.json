{
  "name": "viral video postcrawl",
  "nodes": [
    {
      "parameters": {},
      "id": "ddb82d3c-d75a-44e3-adba-ea665bbc9e2c",
      "name": "Start",
      "type": "n8n-nodes-base.start",
      "typeVersion": 1,
      "position": [
        -560,
        -60
      ]
    },
    {
      "parameters": {
        "jsCode": "// Define viral topics that perform well\nconst viralTopics = [\n  'space exploration discoveries',\n  'historical mysteries solved',\n  'scientific breakthroughs',\n  'technology innovations',\n  'ocean discoveries',\n  'archaeological findings',\n  'wildlife documentaries',\n  'cultural traditions',\n  'educational science',\n  'interesting facts'\n];\n\n// Pick random topic or use current trending event\nconst randomTopic = viralTopics[Math.floor(Math.random() * viralTopics.length)];\n\n// Generate unique run ID for debugging\nconst runId = 'run_' + new Date().getTime() + '_' + Math.random().toString(36).substr(2, 9);\n\nconst result = {\n  Topic: randomTopic,\n  Max_Results: 5,\n  timestamp: new Date().toISOString(),\n  runId: runId\n};\n\n// Cache this run start\nconsole.log(`=== RUN ${runId} STARTED ===`);\nconsole.log('Topic selected:', randomTopic);\nconsole.log('Run data:', JSON.stringify(result, null, 2));\n\nreturn { json: result };"
      },
      "id": "d43dfc8e-d9df-4f6c-b711-5b7d81a03688",
      "name": "Generate Viral Topic",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        -360,
        -60
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://edge-alpha.postcrawl.com/search-and-extract",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"query\": \"{{ $json.Topic }}\",\n  \"page\": 1,\n  \"results\": {{ $json.Max_Results }},\n  \"sources\": [\"reddit\"],\n  \"response_mode\": \"raw\",\n  \"detailed\": true\n}",
        "options": {
          "timeout": 60000
        }
      },
      "id": "9adf4e51-ef48-42db-aaa8-d9d5666b6d41",
      "name": "PostCrawl Search & Extract",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -160,
        -60
      ],
      "typeVersion": 4.2,
      "credentials": {
        "httpBearerAuth": {
          "id": "WNCUmazAgtW0nrYJ",
          "name": "postcrawl api"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Enhanced content processing with error handling and caching\nconst runId = $node['Generate Viral Topic'].json.runId;\nconsole.log(`=== RUN ${runId}: PROCESSING CONTENT ===`);\n\ntry {\n  const results = $json.results || $json.data || $json || [];\n  \n  // Log raw PostCrawl response for debugging\n  console.log('PostCrawl raw response type:', typeof results);\n  console.log('PostCrawl raw response length:', Array.isArray(results) ? results.length : 'not array');\n  console.log('PostCrawl sample data:', JSON.stringify(results).substring(0, 500) + '...');\n  \n  let processedContent = {\n    hotPosts: [],\n    viralComments: [],\n    trendingHashtags: [],\n    keyInsights: []\n  };\n\n  // Handle different response formats from PostCrawl\n  let postsArray = [];\n  if (Array.isArray(results)) {\n    postsArray = results;\n  } else if (results.posts && Array.isArray(results.posts)) {\n    postsArray = results.posts;\n  } else if (results.data && Array.isArray(results.data)) {\n    postsArray = results.data;\n  }\n\n  console.log(`Processing ${postsArray.length} posts`);\n\n  postsArray.slice(0, 5).forEach((item, index) => {\n    if (item && typeof item === 'object') {\n      // Clean and validate content\n      const title = (item.title || item.text || 'Content Post').substring(0, 200);\n      const content = (item.content || item.description || item.text || '').substring(0, 500);\n      \n      const post = {\n        title: title,\n        content: content,\n        source: item.source || 'social_media',\n        engagement: item.upvotes || item.likes || item.score || 0,\n        url: item.url || '',\n        timestamp: item.created_utc || item.timestamp || new Date().toISOString()\n      };\n      \n      processedContent.hotPosts.push(post);\n      console.log(`Post ${index + 1}:`, post.title.substring(0, 50) + '...');\n      \n      // Extract comments safely\n      if (item.comments && Array.isArray(item.comments)) {\n        item.comments.slice(0, 2).forEach(comment => {\n          if (comment && (comment.text || comment.content)) {\n            const commentText = (comment.text || comment.content).substring(0, 150);\n            if (commentText.length > 10) {\n              processedContent.viralComments.push(commentText);\n            }\n          }\n        });\n      }\n    }\n  });\n\n  // Generate content summary for script creation\n  const contentSummary = processedContent.hotPosts\n    .filter(post => post.content.length > 20)\n    .map(post => `${post.title}: ${post.content}`)\n    .join('\\n\\n')\n    .substring(0, 1000);\n\n  // If no content found, create fallback\n  if (processedContent.hotPosts.length === 0) {\n    console.log('No posts found, using fallback content');\n    processedContent.hotPosts.push({\n      title: \"Interesting Topic Discussion\",\n      content: \"Recent discussions have brought up fascinating points about this topic that deserve exploration.\",\n      source: \"general\",\n      engagement: 0\n    });\n  }\n\n  const result = {\n    originalTopic: $node['Generate Viral Topic'].json.Topic,\n    processedContent: processedContent,\n    contentSummary: contentSummary || \"General discussion about the topic with various perspectives.\",\n    totalPosts: processedContent.hotPosts.length,\n    hasContent: processedContent.hotPosts.length > 0,\n    generatedAt: new Date().toISOString(),\n    runId: runId,\n    debug: {\n      rawResponseType: typeof results,\n      rawResponseKeys: Object.keys(results || {}),\n      postsArrayLength: postsArray.length\n    }\n  };\n  \n  console.log(`Content processing complete: ${result.totalPosts} posts, ${result.processedContent.viralComments.length} comments`);\n  console.log('Content summary length:', result.contentSummary.length);\n  \n  return { json: result };\n\n} catch (error) {\n  console.error(`RUN ${runId}: Error processing content:`, error);\n  \n  return {\n    json: {\n      originalTopic: $node['Generate Viral Topic'].json.Topic || \"General Topic\",\n      processedContent: {\n        hotPosts: [{\n          title: \"Discussion Topic\",\n          content: \"Various perspectives and discussions around this interesting topic.\",\n          source: \"fallback\",\n          engagement: 0\n        }],\n        viralComments: [],\n        trendingHashtags: [],\n        keyInsights: []\n      },\n      contentSummary: \"General discussion about the topic with various perspectives.\",\n      totalPosts: 1,\n      hasContent: true,\n      error: error.message,\n      generatedAt: new Date().toISOString(),\n      runId: runId,\n      debug: {\n        errorOccurred: true,\n        errorMessage: error.message\n      }\n    }\n  };\n}"
      },
      "id": "6bfa67e6-c13c-4e6d-871c-83073a66d0b4",
      "name": "Process Viral Content",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        40,
        -60
      ]
    },
    {
      "parameters": {
        "resource": "chat",
        "model": "gpt-4o-mini",
        "prompt": {
          "messages": [
            {
              "role": "system",
              "content": "You are a professional video script writer. Create engaging, educational content that's informative and entertaining. Focus on factual information and keep scripts concise for testing."
            },
            {
              "content": "=Topic: {{ $node['Generate Viral Topic'].json.Topic }}\n\nRecent discussions:\n{{ $node['Process Viral Content'].json.contentSummary }}\n\nCreate a SHORT 30-45 second video script for testing. Include:\n1. Quick hook (2 seconds)\n2. 2 key facts\n3. Simple conclusion\n\nKeep it brief and engaging for social media testing."
            }
          ]
        },
        "options": {
          "maxTokens": 300,
          "temperature": 0.7
        },
        "requestOptions": {
          "timeout": 15000
        }
      },
      "id": "c91a6d4e-9ea9-4ea5-b594-c4a07ee3e683",
      "name": "Generate Viral Script",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [
        240,
        -160
      ],
      "credentials": {
        "openAiApi": {
          "id": "gzOJyFN8ocukfKUb",
          "name": "OpenAi account ps"
        }
      }
    },
    {
      "parameters": {
        "resource": "image",
        "prompt": "=Simple educational image about {{ $node['Generate Viral Topic'].json.Topic }}, clean style, minimal design, bright colors, suitable for social media thumbnail",
        "options": {},
        "requestOptions": {
          "timeout": 20000
        }
      },
      "id": "edbef822-a26e-4e10-b80e-a963b60e5be1",
      "name": "Generate Content Images",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [
        240,
        120
      ],
      "credentials": {
        "openAiApi": {
          "id": "gzOJyFN8ocukfKUb",
          "name": "OpenAi account ps"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.openai.com/v1/audio/speech",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"gpt-4o-mini-tts\",\n  \"input\": {{ JSON.stringify($node['Generate Viral Script'].json.message.content.replace(/\\*\\*\\[.*?\\]\\*\\*/g, '').replace(/🎥.*?\\]/g, '').replace(/\\*\\*/g, '').replace(/\\[.*?\\]/g, '').trim()) }},\n  \"voice\": \"alloy\",\n  \"response_format\": \"mp3\",\n  \"instructions\": \"Speak in a clear, engaging voice suitable for educational content.\"\n}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "file"
            }
          },
          "timeout": 60000
        }
      },
      "id": "185b1f46-adaf-4a97-86ca-1a8c14d878a1",
      "name": "Generate Audio Narration",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        440,
        -60
      ],
      "credentials": {
        "httpBearerAuth": {
          "id": "AdycD5YlDKe33XZC",
          "name": "openai key ps"
        }
      }
    },
    {
      "parameters": {
        "amount": 3,
        "unit": "seconds"
      },
      "id": "wait-for-images",
      "name": "Wait for Images",
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1,
      "position": [
        440,
        120
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "merge-audio-images",
      "name": "Merge Audio & Images",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        540,
        -60
      ]
    },
    {
      "parameters": {
        "jsCode": "// Create comprehensive video package with error handling\nconsole.log('=== VIDEO PACKAGE CREATION ===');\nconsole.log('Received data from merge:', JSON.stringify($json, null, 2));\n\ntry {\n  // Try to get data from direct node references first, fallback to merged data\n  const script = $node['Generate Viral Script'].json.message.content || 'No script available';\n  const images = $node['Generate Content Images'].json.data || [];\n  const audioData = $node['Generate Audio Narration'].json || {};\n  const originalData = $node['Process Viral Content'].json;\n  \n  console.log('Script length:', script.length);\n  console.log('Images count:', images.length);\n  console.log('Audio data keys:', Object.keys(audioData));\n  console.log('Original data keys:', Object.keys(originalData));\n\n  // Extract title from script\n  const lines = script.split('\\n').filter(line => line.trim());\n  const hookLine = lines[0] || 'Educational Content';\n  const title = hookLine.replace(/[\\\"']/g, '').trim().substring(0, 50);\n\n  // Generate hashtags\n  const baseHashtags = '#education #facts #learning #test';\n  const topicHashtags = originalData.originalTopic.toLowerCase()\n    .split(' ')\n    .filter(word => word.length > 2)\n    .map(word => '#' + word.replace(/[^a-zA-Z]/g, ''))\n    .slice(0, 2)\n    .join(' ');\n\n  // Create video metadata\n  const videoPackage = {\n    title: title || 'Test Educational Content',\n    description: `Testing: ${originalData.originalTopic}`,\n    script: script,\n    cleanScript: script.trim(),\n    images: images.map(img => img.url || img.b64_json),\n    audioUrl: audioData.url || audioData.b64_json || 'generated',\n    audioData: audioData,\n    hashtags: `${baseHashtags} ${topicHashtags}`.trim(),\n    originalTopic: originalData.originalTopic,\n    sourceData: {\n      totalPosts: originalData.totalPosts,\n      viralPosts: originalData.processedContent.hotPosts.slice(0, 2)\n    },\n    videoSpecs: {\n      duration: '30-45 seconds',\n      format: 'vertical 9:16',\n      style: 'educational/test',\n      voiceover: 'alloy voice'\n    },\n    generatedAt: new Date().toISOString(),\n    readyForEditing: true,\n    status: 'success',\n    mode: 'testing'\n  };\n\n  console.log('Video package created successfully:', JSON.stringify(videoPackage, null, 2));\n  return { json: videoPackage };\n\n} catch (error) {\n  console.error('Error creating video package:', error);\n  \n  return {\n    json: {\n      title: 'Test Error - Video Package Creation Failed',\n      error: error.message,\n      status: 'failed',\n      originalTopic: $node['Generate Viral Topic'].json.Topic || 'Unknown',\n      generatedAt: new Date().toISOString(),\n      readyForEditing: false,\n      mode: 'testing'\n    }\n  };\n}"
      },
      "id": "949120d2-492d-4b52-bf95-b3d87eb0193b",
      "name": "Create Video Package",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        640,
        -60
      ]
    },
    {
      "parameters": {
        "resource": "chat",
        "model": "gpt-4o-mini",
        "prompt": {
          "messages": [
            {
              "role": "system",
              "content": "Generate simple social media copy for testing. Keep it brief and basic."
            },
            {
              "content": "=Topic: {{ $node['Create Video Package'].json.originalTopic }}\n\nGenerate simple test marketing copy:\n1. 2 YouTube titles (under 50 chars)\n2. 1 TikTok caption\n3. Basic hashtags\n\nKeep it simple for testing purposes."
            }
          ]
        },
        "options": {
          "maxTokens": 200,
          "temperature": 0.6
        },
        "requestOptions": {
          "timeout": 15000
        }
      },
      "id": "b3bc1eeb-6c23-4a8b-bc1e-1fff2923f699",
      "name": "Generate Marketing Copy",
      "type": "n8n-nodes-base.openAi",
      "typeVersion": 1,
      "position": [
        840,
        -60
      ],
      "credentials": {
        "openAiApi": {
          "id": "gzOJyFN8ocukfKUb",
          "name": "OpenAi account ps"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Prepare video creation with FFmpeg command\nconsole.log('=== PREPARING VIDEO CREATION ===');\n\ntry {\n  const videoData = $node['Create Video Package'].json || {};\n  const imageData = $node['Generate Content Images'].json || {};\n  const audioData = $node['Generate Audio Narration'].json || {};\n  const scriptData = $node['Generate Viral Script'].json || {};\n  \n  // Check available assets\n  const hasImages = imageData.data && imageData.data.length > 0;\n  const hasAudio = audioData.url || audioData.b64_json;\n  const hasScript = scriptData.message && scriptData.message.content;\n  \n  console.log('Assets available:');\n  console.log('- Images:', hasImages, imageData.data?.length || 0);\n  console.log('- Audio:', hasAudio);\n  console.log('- Script:', hasScript);\n  \n  if (!hasImages || !hasAudio) {\n    console.log('Missing required assets for video creation');\n    return {\n      json: {\n        status: 'incomplete',\n        message: 'Missing required assets for video creation',\n        hasImages,\n        hasAudio,\n        hasScript,\n        timestamp: new Date().toISOString()\n      }\n    };\n  }\n  \n  // Create video preparation package\n  const videoPrep = {\n    status: 'ready_for_video_creation',\n    title: videoData.title || 'Generated Video',\n    assets: {\n      images: {\n        count: imageData.data.length,\n        urls: imageData.data.map(img => img.url),\n        firstImage: imageData.data[0]?.url\n      },\n      audio: {\n        url: audioData.url,\n        format: 'mp3',\n        voice: 'alloy'\n      },\n      script: {\n        content: scriptData.message.content,\n        length: scriptData.message.content.length\n      }\n    },\n    videoSpecs: {\n      format: '9:16 (1080x1920)',\n      duration: '30-45 seconds',\n      fps: 30,\n      codec: 'H.264',\n      quality: 'High'\n    },\n    ffmpegCommand: {\n      description: 'Ready to create video with images, audio, and subtitles',\n      command: `ffmpeg -loop 1 -i \"${imageData.data[0]?.url}\" -i \"${audioData.url}\" -filter_complex \"[0:v]scale=1080:1920:force_original_aspect_ratio=decrease,pad=1080:1920:(ow-iw)/2:(oh-ih)/2[v]\" -map \"[v]\" -map 1:a -c:v libx264 -c:a aac -b:v 2M -b:a 128k -shortest -t 45 output_video.mp4`,\n      note: 'Command ready for execution with FFmpeg'\n    },\n    nextSteps: [\n      'Download audio file from URL',\n      'Download image files from URLs', \n      'Execute FFmpeg command',\n      'Generate final MP4 video'\n    ],\n    generatedAt: new Date().toISOString()\n  };\n  \n  console.log('Video preparation complete:', JSON.stringify(videoPrep, null, 2));\n  \n  return { json: videoPrep };\n  \n} catch (error) {\n  console.error('Error preparing video:', error);\n  return {\n    json: {\n      status: 'error',\n      message: 'Failed to prepare video creation',\n      error: error.message,\n      timestamp: new Date().toISOString()\n    }\n  };\n}"
      },
      "id": "prepare-video-creation",
      "name": "Prepare Video Creation",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        740,
        -60
      ]
    },
    {
      "parameters": {
        "jsCode": "// Create final video output with comprehensive metadata\nconsole.log('=== FINAL OUTPUT GENERATION ===');\n\ntry {\n  const videoData = $node['Create Video Package'].json || {};\n  const marketingData = $node['Generate Marketing Copy'].json || {};\n  const originalData = $node['Process Viral Content'].json || {};\n  const scriptData = $node['Generate Viral Script'].json || {};\n  const imageData = $node['Generate Content Images'].json || {};\n  const audioData = $node['Generate Audio Narration'].json || {};\n\n  console.log('Video data keys:', Object.keys(videoData));\n  console.log('Marketing data keys:', Object.keys(marketingData));\n  console.log('Image data keys:', Object.keys(imageData));\n  console.log('Audio data keys:', Object.keys(audioData));\n\n  // Video-focused final output\n  const finalVideoOutput = {\n    videoMetadata: {\n      title: videoData.title || 'Generated Video',\n      description: videoData.description || 'AI-generated video content',\n      topic: originalData.originalTopic || 'Unknown topic',\n      duration: videoData.videoSpecs?.duration || '30-45 seconds',\n      format: videoData.videoSpecs?.format || '9:16 vertical',\n      style: videoData.videoSpecs?.style || 'educational',\n      status: videoData.status || 'unknown',\n      readyForEditing: videoData.readyForEditing || false,\n      generatedAt: new Date().toISOString()\n    },\n    content: {\n      script: {\n        fullText: scriptData.message?.content || videoData.script || 'No script available',\n        cleanText: videoData.cleanScript || 'No clean script',\n        wordCount: (scriptData.message?.content || '').split(' ').length\n      },\n      audio: {\n        available: !!audioData.url || !!audioData.b64_json,\n        url: audioData.url || 'Generated audio data',\n        format: 'mp3',\n        voice: 'alloy',\n        instructions: 'Clear, engaging educational voice'\n      },\n      images: {\n        available: !!(imageData.data && imageData.data.length > 0),\n        count: imageData.data?.length || 0,\n        urls: imageData.data?.map(img => img.url || img.b64_json) || [],\n        description: 'Content-relevant images generated'\n      },\n      marketing: {\n        copy: marketingData.message?.content || 'Marketing copy generated',\n        hashtags: videoData.hashtags || '#video #content',\n        platforms: ['YouTube', 'TikTok', 'Instagram']\n      }\n    },\n    production: {\n      sourceData: {\n        totalPosts: originalData.totalPosts || 0,\n        viralPosts: originalData.processedContent?.hotPosts?.slice(0, 2) || [],\n        comments: originalData.processedContent?.viralComments?.slice(0, 3) || []\n      },\n      assets: {\n        hasScript: !!(scriptData.message?.content || videoData.script),\n        hasAudio: !!(audioData.url || audioData.b64_json),\n        hasImages: !!(imageData.data && imageData.data.length > 0),\n        hasMarketing: !!(marketingData.message?.content)\n      },\n      readyForProduction: videoData.readyForEditing && !!(scriptData.message?.content) && !!(audioData.url || audioData.b64_json)\n    }\n  };\n\n  console.log('=== FINAL VIDEO OUTPUT COMPLETE ===');\n  console.log(JSON.stringify(finalVideoOutput, null, 2));\n\n  return { json: finalVideoOutput };\n\n} catch (error) {\n  console.error('Error in final output:', error);\n  return {\n    json: {\n      error: 'Failed to create final output',\n      message: error.message,\n      timestamp: new Date().toISOString()\n    }\n  };\n}"
      },
      "id": "84f34b1f-75be-4c2d-ab30-ead3b26c0673",
      "name": "Final JSON Output",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        1040,
        -60
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Start": {
      "main": [
        [
          {
            "node": "Generate Viral Topic",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Viral Topic": {
      "main": [
        [
          {
            "node": "PostCrawl Search & Extract",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PostCrawl Search & Extract": {
      "main": [
        [
          {
            "node": "Process Viral Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Viral Content": {
      "main": [
        [
          {
            "node": "Generate Viral Script",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Viral Script": {
      "main": [
        [
          {
            "node": "Generate Content Images",
            "type": "main",
            "index": 0
          },
          {
            "node": "Generate Audio Narration",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Content Images": {
      "main": [
        [
          {
            "node": "Wait for Images",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait for Images": {
      "main": [
        [
          {
            "node": "Merge Audio & Images",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Generate Audio Narration": {
      "main": [
        [
          {
            "node": "Merge Audio & Images",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Audio & Images": {
      "main": [
        [
          {
            "node": "Create Video Package",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Video Package": {
      "main": [
        [
          {
            "node": "Generate Marketing Copy",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Marketing Copy": {
      "main": [
        [
          {
            "node": "Prepare Video Creation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Video Creation": {
      "main": [
        [
          {
            "node": "Final JSON Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "3efc662f-793f-4ba1-8b69-43d85be623ed",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "6e1130bae46ac586f0d46d34517cdc150bf178eb065587f8ddde4719ef30d06d"
  },
  "id": "mMZcNqTMfLUtPQ0t",
  "tags": []
}